{"version":3,"sources":["webpack://ieee-gect/./src/components/events.component.jsx","webpack://ieee-gect/./src/components/ex/c1.jsx","webpack://ieee-gect/./node_modules/react-hook-form/dist/index.esm.js","webpack://ieee-gect/./src/components/shoppingcard.component.jsx","webpack://ieee-gect/./src/components/uikit-card.component.jsx","webpack://ieee-gect/./src/pages/link1.jsx"],"names":["className","href","src","alt","viewBox","xmlns","d","class","UNDEFINED","FormContext","displayName","isWeb","window","HTMLElement","document","fill","x","y","width","height","rx","transform","srcSet","strokeWidth","stroke","strokeLinecap","strokeLinejoin","cx","cy","r","defaultChecked","type","name","x1","y1","x2","y2","route","title","role","aria-label","id","frameborder","allow"],"mappings":"sKAsCA,EApCiB,WACb,OAEQ,uBAAKA,UAAU,qBACX,uBAAKA,UAAU,wBACf,uBAAKA,UAAU,yCACX,qBAAGC,KAAK,GAAGD,UAAU,8EACrB,uBAAKA,UAAU,kCACf,uBAAKA,UAAU,8CAA8CE,IAAI,wIAAwIC,IAAI,MAE7M,uBAAKH,UAAU,OACf,wBAAMA,UAAU,gIAAhB,aACA,sBAAIA,UAAU,wBAAd,mCACA,qBAAGA,UAAU,WAAb,oHACA,uBAAKA,UAAU,0BACX,wBAAMA,UAAU,yBAAhB,MADJ,IAC2D,wBAAMA,UAAU,qBAAhB,SAD3D,IACiH,wBAAMA,UAAU,yBAAhB,OAGjH,uBAAKA,UAAU,+CACf,wBAAMA,UAAU,0BACZ,qBAAGA,UAAU,0CADjB,WAGA,wBAAMA,UAAU,qBACZ,qBAAGA,UAAU,iDADjB,0BAIA,uBAAKA,UAAU,+CAA8C,uBAAKI,QAAQ,YAAYC,MAAM,6BAA6BL,UAAU,wCAAuC,wBAAMM,EAAE,6fAAugB,uBAAKF,QAAQ,YAAYC,MAAM,6BAA6BL,UAAU,wCAAuC,wBAAMM,EAAE,6fAAugB,uBAAKF,QAAQ,YAAYC,MAAM,6BAA6BL,UAAU,wCAAuC,wBAAMM,EAAE,6fAAugB,uBAAKF,QAAQ,YAAYC,MAAM,6BAA6BL,UAAU,wCAAuC,wBAAMM,EAAE,6fAAugB,uBAAKF,QAAQ,YAAYC,MAAM,6BAA6BL,UAAU,sCAAqC,wBAAMM,EAAE,6fAAugB,wBAAMN,UAAU,QAAhB,wBCJ3rG,EAtBgB,WACZ,OACI,uBAAKO,MAAM,QAEP,uBAAKA,MAAM,8CACX,uBAAKA,MAAM,SAASL,IAAI,kHAAkHC,IAAI,aAC9I,uBAAKI,MAAM,aACP,uBAAKA,MAAM,0BAAX,YACA,qBAAGA,MAAM,2BAAT,wJAIJ,uBAAKA,MAAM,kBACP,wBAAMA,MAAM,iGAAZ,gBACA,wBAAMA,MAAM,iGAAZ,WACA,wBAAMA,MAAM,iGAAZ,e,QCDhB,IA4DIC,EAAY,YAiBZC,EAAc,gBAAoB,MACtCA,EAAYC,YAAc,aAE1B,IA2CIC,SAAeC,SAAWJ,UAAoBI,OAAOC,cAAgBL,UAAoBM,WAAaN,EACrFG,GAAmBC,O,wBCjDpC,EAzFa,WACb,OAEI,uBAAKL,MAAM,8CACP,uBAAKA,MAAM,iGACP,uBAAKA,MAAM,gCAAgCH,QAAQ,cAAcW,KAAK,QAClE,wBAAMC,EAAE,SAASC,EAAE,MAAMC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,yBAAyBN,KAAK,YAEjG,wBAAME,EAAE,SAASC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,uBAAuBN,KAAK,aAG3F,uBAAKR,MAAM,yDACP,uBAAKA,MAAM,yDAEX,+BACQ,0BAAQe,OAAO,kCACX,uBAAKf,MAAM,gBAAgBL,IAAI,gCAAgCC,IAAI,oBAG3E,uBAAKI,MAAM,sCACP,wBAAMA,MAAM,0BAAZ,UAGA,uBAAKA,MAAM,wBACP,wBAAMA,MAAM,+BAAZ,cAGA,wBAAMA,MAAM,oGAAZ,aAMZ,uBAAKA,MAAM,sGACP,uBAAKA,MAAM,gCAAgCH,QAAQ,cAAcW,KAAK,QAClE,wBAAMC,EAAE,SAASC,EAAE,MAAMC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,yBAAyBN,KAAK,YAEjG,wBAAME,EAAE,SAASC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,uBAAuBN,KAAK,aAG3F,uBAAKR,MAAM,yDACP,uBAAKA,MAAM,yDAEX,uBAAKA,MAAM,gBAAgBL,IAAI,gCAAgCC,IAAI,cAEvE,uBAAKI,MAAM,sCACP,wBAAMA,MAAM,0BAAZ,WAGA,uBAAKA,MAAM,wBACP,wBAAMA,MAAM,+BAAZ,YAGA,wBAAMA,MAAM,kGAAZ,aAMZ,uBAAKA,MAAM,iGACP,uBAAKA,MAAM,gCAAgCH,QAAQ,cAAcW,KAAK,QAClE,wBAAMC,EAAE,SAASC,EAAE,MAAMC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,yBAAyBN,KAAK,YAEjG,wBAAME,EAAE,SAASC,MAAM,MAAMC,OAAO,MAAMC,GAAG,IAAIC,UAAU,uBAAuBN,KAAK,aAG3F,uBAAKR,MAAM,yDACP,uBAAKA,MAAM,yDAEX,uBAAKA,MAAM,gBAAgBL,IAAI,gCAAgCC,IAAI,cAEvE,uBAAKI,MAAM,sCACP,wBAAMA,MAAM,0BAAZ,WAGA,uBAAKA,MAAM,wBACP,wBAAMA,MAAM,+BAAZ,YAGA,wBAAMA,MAAM,oGAAZ,eCiBhC,MAjGA,WACI,OACI,gCAGI,uBAAKP,UAAU,+GACX,uBAAKA,UAAU,mBACX,uBAAKA,UAAU,uDACX,uBAAKA,UAAU,iFACX,sBAAIA,UAAU,4EAAd,WACA,sBAAIA,UAAU,kEAAd,wBAEJ,sBAAIA,UAAU,4FAAd,yCACA,qBAAGA,UAAU,8GAAb,yrCACA,uBAAKA,UAAU,yDAmBX,uBAAKA,UAAU,6CACX,wBAAMA,UAAU,yCACZ,uBAAKK,MAAM,6BAA6BL,UAAU,uCAAuCkB,MAAO,GAAIC,OAAQ,GAAIf,QAAQ,YAAYmB,YAAY,MAAMC,OAAO,eAAeT,KAAK,OAAOU,cAAc,QAAQC,eAAe,SACzN,wBAAMF,OAAO,OAAOlB,EAAE,kBACtB,0BAAQqB,GAAI,GAAIC,GAAI,GAAIC,EAAG,IAC3B,wBAAMvB,EAAE,6FAGhB,qBAAGN,UAAU,oFAAb,wBAIZ,uBAAKA,UAAU,0GACX,uBAAKA,UAAU,qBACX,uBAAKA,UAAU,qBACX,uBAAKA,UAAU,yFACX,yBAAO8B,gBAAc,EAACC,KAAK,QAAQC,KAAK,QAAQhC,UAAU,8IAC1D,uBAAKA,UAAU,iGAEnB,qBAAGA,UAAU,yEAAb,UAEJ,uBAAKA,UAAU,0BACX,uBAAKA,UAAU,yFACX,yBAAO+B,KAAK,QAAQC,KAAK,QAAQhC,UAAU,8IAC3C,uBAAKA,UAAU,iGAEnB,qBAAGA,UAAU,yEAAb,eAGR,uBAAKA,UAAU,qBACX,uBAAKA,UAAU,4EACX,uBAAKA,UAAU,2BAA2BK,MAAM,6BAA6Ba,MAAO,GAAIC,OAAQ,GAAIf,QAAQ,YAAYW,KAAK,OAAOS,OAAO,eAAeD,YAAY,MAAME,cAAc,QAAQC,eAAe,SAC7M,wBAAMpB,EAAE,wDAGhB,uBAAKN,UAAU,6EACX,uBAAKA,UAAU,0BAA0BK,MAAM,6BAA6Ba,MAAO,GAAIC,OAAQ,GAAIf,QAAQ,YAAYW,KAAK,OAAOS,OAAO,eAAeD,YAAY,MAAME,cAAc,QAAQC,eAAe,SAC5M,0BAAQC,GAAI,GAAIC,GAAI,EAAGC,EAAG,IAC1B,0BAAQF,GAAI,EAAGC,GAAI,GAAIC,EAAG,IAC1B,0BAAQF,GAAI,GAAIC,GAAI,GAAIC,EAAG,IAC3B,wBAAMI,GAAG,OAAOC,GAAG,QAAQC,GAAG,QAAQC,GAAG,UACzC,wBAAMH,GAAG,QAAQC,GAAG,OAAOC,GAAG,OAAOC,GAAG,eAM5D,uBAAKpC,UAAU,iGACX,uBAAKA,UAAU,uFAAuFE,IAAI,0EAA0EC,IAAI,YAG5L,wSCLhB,EArEkB,kBAChB,gBAAC,IAAD,CAAQkC,MAAM,UACZ,gBAAC,IAAD,CAAKC,MAAM,WAEX,uBAAKtC,UAAU,4BACb,qBAAGA,UAAU,wCAAb,UAEE,wBAAMuC,KAAK,MAAMC,aAAW,iBAA5B,MAGA,wBAAMD,KAAK,MAAMC,aAAW,iBAA5B,MAGA,wBAAMD,KAAK,MAAMC,aAAW,0BAA5B,QAMJ,uBAAKxC,UAAU,4BACb,qBAAGA,UAAU,wCAAb,UAEE,wBAAMuC,KAAK,MAAMC,aAAW,iBAA5B,MAGA,wBAAMD,KAAK,MAAMC,aAAW,iBAA5B,MAGA,wBAAMD,KAAK,MAAMC,aAAW,0BAA5B,QAMJ,uBAAKxC,UAAU,4BACb,uBAAKA,UAAU,uCACf,uBAAKA,UAAU,0BACb,gBAAC,EAAD,SAMA,uBAAKA,UAAU,4BACb,gBAAC,EAAD,OAGN,uBAAKA,UAAU,iBAAgB,gBAAC,EAAD,OAE/B,uBAAKA,UAAU,0CACb,uBAAKA,UAAU,0BAEf,gBAAC,EAAD,QAKF,gBAAC,EAAD,MACA,gBAAC,EAAD,MACA,gBAAC,EAAD,MACA,2BACA,0BAAQyC,GAAG,gBAAgBvB,MAAM,OAAOC,OAAO,OAAOuB,YAAY,IAAIC,MAAM,iDAAiDzC,IAAI","file":"component---src-pages-link-1-jsx-9f99c166cd36684bddc3.js","sourcesContent":["import * as React from 'react'\n\nconst Cardgame = () => {\n    return (\n        \n            <div className=\"container mx-auto\">\n                <div className=\"flex flex-wrap -mx-4\">\n                <div className=\"w-full sm:w-1/2 md:w-1/2 xl:w-1/4 p-4\">\n                    <a href=\"\" className=\"c-card block bg-white shadow-md hover:shadow-xl rounded-lg overflow-hidden\">\n                    <div className=\"relative pb-48 overflow-hidden\">\n                    <img className=\"absolute inset-0 h-full w-full object-cover\" src=\"https://images.unsplash.com/photo-1475855581690-80accde3ae2b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80\" alt=\"\"/>\n                    </div>\n                    <div className=\"p-4\">\n                    <span className=\"inline-block px-2 py-1 leading-none bg-orange-200 text-orange-800 rounded-full font-semibold uppercase tracking-wide text-xs\">Highlight</span>\n                    <h2 className=\"mt-2 mb-2  font-bold\">Purus Ullamcorper Inceptos Nibh</h2>\n                    <p className=\"text-sm\">Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec ullamcorper nulla non metus auctor fringilla.</p>\n                    <div className=\"mt-3 flex items-center\">\n                        <span className=\"text-sm font-semibold\">ab</span>&nbsp;<span className=\"font-bold text-xl\">45,00</span>&nbsp;<span className=\"text-sm font-semibold\">€</span>\n                    </div>\n                    </div>\n                    <div className=\"p-4 border-t border-b text-xs text-gray-700\">\n                    <span className=\"flex items-center mb-1\">\n                        <i className=\"far fa-clock fa-fw mr-2 text-gray-900\"></i> 3 Tage\n                    </span>\n                    <span className=\"flex items-center\">\n                        <i className=\"far fa-address-card fa-fw text-gray-900 mr-2\"></i> Ermäßigung mit Karte\n                    </span>        \n                    </div>\n                    <div className=\"p-4 flex items-center text-sm text-gray-600\"><svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 fill-current text-yellow-500\"><path d=\"M8.128 19.825a1.586 1.586 0 0 1-1.643-.117 1.543 1.543 0 0 1-.53-.662 1.515 1.515 0 0 1-.096-.837l.736-4.247-3.13-3a1.514 1.514 0 0 1-.39-1.569c.09-.271.254-.513.475-.698.22-.185.49-.306.776-.35L8.66 7.73l1.925-3.862c.128-.26.328-.48.577-.633a1.584 1.584 0 0 1 1.662 0c.25.153.45.373.577.633l1.925 3.847 4.334.615c.29.042.562.162.785.348.224.186.39.43.48.704a1.514 1.514 0 0 1-.404 1.58l-3.13 3 .736 4.247c.047.282.014.572-.096.837-.111.265-.294.494-.53.662a1.582 1.582 0 0 1-1.643.117l-3.865-2-3.865 2z\"></path></svg><svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 fill-current text-yellow-500\"><path d=\"M8.128 19.825a1.586 1.586 0 0 1-1.643-.117 1.543 1.543 0 0 1-.53-.662 1.515 1.515 0 0 1-.096-.837l.736-4.247-3.13-3a1.514 1.514 0 0 1-.39-1.569c.09-.271.254-.513.475-.698.22-.185.49-.306.776-.35L8.66 7.73l1.925-3.862c.128-.26.328-.48.577-.633a1.584 1.584 0 0 1 1.662 0c.25.153.45.373.577.633l1.925 3.847 4.334.615c.29.042.562.162.785.348.224.186.39.43.48.704a1.514 1.514 0 0 1-.404 1.58l-3.13 3 .736 4.247c.047.282.014.572-.096.837-.111.265-.294.494-.53.662a1.582 1.582 0 0 1-1.643.117l-3.865-2-3.865 2z\"></path></svg><svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 fill-current text-yellow-500\"><path d=\"M8.128 19.825a1.586 1.586 0 0 1-1.643-.117 1.543 1.543 0 0 1-.53-.662 1.515 1.515 0 0 1-.096-.837l.736-4.247-3.13-3a1.514 1.514 0 0 1-.39-1.569c.09-.271.254-.513.475-.698.22-.185.49-.306.776-.35L8.66 7.73l1.925-3.862c.128-.26.328-.48.577-.633a1.584 1.584 0 0 1 1.662 0c.25.153.45.373.577.633l1.925 3.847 4.334.615c.29.042.562.162.785.348.224.186.39.43.48.704a1.514 1.514 0 0 1-.404 1.58l-3.13 3 .736 4.247c.047.282.014.572-.096.837-.111.265-.294.494-.53.662a1.582 1.582 0 0 1-1.643.117l-3.865-2-3.865 2z\"></path></svg><svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 fill-current text-yellow-500\"><path d=\"M8.128 19.825a1.586 1.586 0 0 1-1.643-.117 1.543 1.543 0 0 1-.53-.662 1.515 1.515 0 0 1-.096-.837l.736-4.247-3.13-3a1.514 1.514 0 0 1-.39-1.569c.09-.271.254-.513.475-.698.22-.185.49-.306.776-.35L8.66 7.73l1.925-3.862c.128-.26.328-.48.577-.633a1.584 1.584 0 0 1 1.662 0c.25.153.45.373.577.633l1.925 3.847 4.334.615c.29.042.562.162.785.348.224.186.39.43.48.704a1.514 1.514 0 0 1-.404 1.58l-3.13 3 .736 4.247c.047.282.014.572-.096.837-.111.265-.294.494-.53.662a1.582 1.582 0 0 1-1.643.117l-3.865-2-3.865 2z\"></path></svg><svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 fill-current text-gray-400\"><path d=\"M8.128 19.825a1.586 1.586 0 0 1-1.643-.117 1.543 1.543 0 0 1-.53-.662 1.515 1.515 0 0 1-.096-.837l.736-4.247-3.13-3a1.514 1.514 0 0 1-.39-1.569c.09-.271.254-.513.475-.698.22-.185.49-.306.776-.35L8.66 7.73l1.925-3.862c.128-.26.328-.48.577-.633a1.584 1.584 0 0 1 1.662 0c.25.153.45.373.577.633l1.925 3.847 4.334.615c.29.042.562.162.785.348.224.186.39.43.48.704a1.514 1.514 0 0 1-.404 1.58l-3.13 3 .736 4.247c.047.282.014.572-.096.837-.111.265-.294.494-.53.662a1.582 1.582 0 0 1-1.643.117l-3.865-2-3.865 2z\"></path></svg><span className=\"ml-2\">34 Bewertungen</span></div>\n                </a>\n                </div>\n                \n                </div>\n            </div>\n        \n    )\n}\n\nexport default Cardgame","import * as React from 'react'\n\nconst CardOne = () => {\n    return (\n        <div class=\"p-10\">  \n        \n            <div class=\"max-w-sm rounded overflow-hidden shadow-lg\">\n            <img class=\"w-full\" src=\"https://www.whatdigitalcamera.com/wp-content/uploads/sites/13/2014/09/Samsung_WB350F_sample_image_4-300x400.jpg\" alt=\"Mountain\"/>\n            <div class=\"px-6 py-4\">\n                <div class=\"font-bold text-xl mb-2\">Mountain</div>\n                <p class=\"text-gray-700 text-base\">\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.\n                </p>\n            </div>\n            <div class=\"px-6 pt-4 pb-2\">\n                <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#photography</span>\n                <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#travel</span>\n                <span class=\"inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">#winter</span>\n            </div>\n            </div>\n      </div>\n    )\n}\n\nexport default CardOne","import _classCallCheck from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/home/wckd14/Desktop/react/IEEE-GECT-Website/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as React from 'react';\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\n};\n\nvar getControllerValue = function getControllerValue(event) {\n  return isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\n};\n\nvar getNodeParentName = function getNodeParentName(name) {\n  return name.substring(0, name.search(/.\\d/)) || name;\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return getNodeParentName(name) === current;\n  });\n};\n\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar _get = function get() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var path = arguments.length > 1 ? arguments[1] : undefined;\n  var defaultValue = arguments.length > 2 ? arguments[2] : undefined;\n  var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar SELECT = 'select';\nvar UNDEFINED = 'undefined';\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nvar omit = function omit(source, key) {\n  var copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\n\nvar FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\n\nvar useFormContext = function useFormContext() {\n  return React.useContext(FormContext);\n};\n\nvar FormProvider = function FormProvider(props) {\n  return React.createElement(FormContext.Provider, {\n    value: omit(props, 'children')\n  }, props.children);\n};\n\nvar getProxyFormState = function getProxyFormState(isProxyEnabled, formState, readFormStateRef, localReadFormStateRef) {\n  var isRoot = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return isProxyEnabled ? new Proxy(formState, {\n    get: function get(obj, prop) {\n      if (prop in obj) {\n        if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n          readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n        }\n\n        localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n        return obj[prop];\n      }\n\n      return undefined;\n    }\n  }) : formState;\n};\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar shouldRenderFormState = function shouldRenderFormState(formStateData, readFormStateRef, isRoot) {\n  var formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(function (key) {\n    return readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true);\n  });\n};\n\nvar convertToArrayPayload = function convertToArrayPayload(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar isWeb = typeof window !== UNDEFINED && typeof window.HTMLElement !== UNDEFINED && typeof document !== UNDEFINED;\nvar isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nfunction useFormState(props) {\n  var _ref = props || {},\n      control = _ref.control,\n      name = _ref.name;\n\n  var methods = useFormContext();\n\n  var _ref2 = control || methods.control,\n      formStateRef = _ref2.formStateRef,\n      formStateSubjectRef = _ref2.formStateSubjectRef,\n      readFormStateRef = _ref2.readFormStateRef;\n\n  var nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  var _React$useState = React.useState(formStateRef.current),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formState = _React$useState2[0],\n      updateFormState = _React$useState2[1];\n\n  var readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(function () {\n    var formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: function next(formState) {\n        return (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState));\n      }\n    });\n    return function () {\n      return formStateSubscription.unsubscribe();\n    };\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\n\nfunction useController(_ref3) {\n  var name = _ref3.name,\n      rules = _ref3.rules,\n      defaultValue = _ref3.defaultValue,\n      control = _ref3.control,\n      shouldUnregister = _ref3.shouldUnregister;\n  var methods = useFormContext();\n\n  var _ref4 = control || methods.control,\n      defaultValuesRef = _ref4.defaultValuesRef,\n      register = _ref4.register,\n      fieldsRef = _ref4.fieldsRef,\n      unregister = _ref4.unregister,\n      fieldArrayNamesRef = _ref4.fieldArrayNamesRef,\n      controllerSubjectRef = _ref4.controllerSubjectRef,\n      shouldUnmountUnregister = _ref4.shouldUnmountUnregister;\n\n  var _register = register(name, rules),\n      _onChange = _register.onChange,\n      _onBlur = _register.onBlur,\n      _ref5 = _register.ref;\n\n  var _React$useState3 = React.useState(isUndefined(_get(fieldsRef.current, name)._f.value) || isNameInFieldArray(fieldArrayNamesRef.current, name) ? isUndefined(defaultValue) ? _get(defaultValuesRef.current, name) : defaultValue : _get(fieldsRef.current, name)._f.value),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      value = _React$useState4[0],\n      setInputStateValue = _React$useState4[1];\n\n  var formState = useFormState({\n    control: control || methods.control,\n    name: name\n  });\n  _get(fieldsRef.current, name)._f.value = value;\n  React.useEffect(function () {\n    var controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: function next(data) {\n        return (!data.name || name === data.name) && setInputStateValue(_get(data.values, name));\n      }\n    });\n    return function () {\n      controllerSubscription.unsubscribe();\n      (shouldUnmountUnregister || shouldUnregister) && unregister(name);\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: function onChange(event) {\n        var value = getControllerValue(event);\n        setInputStateValue(value);\n\n        _onChange({\n          target: {\n            value: value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: function onBlur() {\n        _onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name: name,\n      value: value,\n      ref: function ref(elm) {\n        return elm && _ref5(elm);\n      }\n    },\n    formState: formState,\n    fieldState: Object.defineProperties({}, {\n      invalid: {\n        get: function get() {\n          return !!_get(formState.errors, name);\n        }\n      },\n      isDirty: {\n        get: function get() {\n          return !!_get(formState.dirtyFields, name);\n        }\n      },\n      isTouched: {\n        get: function get() {\n          return !!_get(formState.touchedFields, name);\n        }\n      },\n      error: {\n        get: function get() {\n          return _get(formState.errors, name);\n        }\n      }\n    })\n  };\n}\n\nvar Controller = function Controller(props) {\n  return props.render(useController(props));\n};\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  return validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n    types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), _defineProperty({}, type, message || true))\n  }) : {};\n};\n\nvar isKey = function isKey(value) {\n  return /^\\w*$/.test(value);\n};\n\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar focusFieldBy = function focusFieldBy(fields, callback, fieldsNames) {\n  var _iterator = _createForOfIteratorHelper(fieldsNames || Object.keys(fields)),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n\n      var field = _get(fields, key);\n\n      if (field) {\n        var _f = field._f;\n        var current = omit(field, '_f');\n\n        if (_f && callback(_f.name)) {\n          if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n            break;\n          } else if (_f.refs) {\n            _f.refs[0].focus();\n\n            break;\n          }\n        } else if (isObject(current)) {\n          focusFieldBy(current, callback);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar getFieldsValues = function getFieldsValues(fieldsRef, defaultValuesRef) {\n  var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  for (var name in fieldsRef.current) {\n    var field = fieldsRef.current[name];\n\n    if (field) {\n      var _f = field._f;\n      var current = omit(field, '_f');\n      set(output, name, _f ? _f.ref.disabled || _f.refs && _f.refs.every(function (ref) {\n        return ref.disabled;\n      }) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n\n      if (current) {\n        getFieldsValues({\n          current: current\n        }, defaultValuesRef, output[name]);\n      }\n    }\n  }\n\n  return Object.assign(Object.assign({}, defaultValuesRef), output);\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(function (value) {\n    return Object.assign(_defineProperty({}, keyName, value && value[keyName] || generateId()), value);\n  });\n};\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    var keys1 = Object.keys(object1);\n    var keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n      var key = _keys[_i];\n      var val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        var val2 = object2[key];\n\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], _get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(_get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), _defineProperty({}, key, true));\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\n};\n\nfunction append(data, value) {\n  return [].concat(_toConsumableArray(data), _toConsumableArray(convertToArrayPayload(value)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n};\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data.slice(index)));\n}\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(convertToArrayPayload(value)), _toConsumableArray(data));\n}\n\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n\n  var temp = _toConsumableArray(data);\n\n  var _iterator2 = _createForOfIteratorHelper(indexes),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var index = _step2.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort(function (a, b) {\n    return a - b;\n  }));\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nfunction baseGet(object, updatePath) {\n  var length = updatePath.slice(0, -1).length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = void 0;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar useFieldArray = function useFieldArray(_ref6) {\n  var control = _ref6.control,\n      name = _ref6.name,\n      _ref6$keyName = _ref6.keyName,\n      keyName = _ref6$keyName === void 0 ? 'id' : _ref6$keyName,\n      shouldUnregister = _ref6.shouldUnregister;\n  var methods = useFormContext();\n  var focusNameRef = React.useRef('');\n\n  var _ref7 = control || methods.control,\n      isWatchAllRef = _ref7.isWatchAllRef,\n      watchFieldsRef = _ref7.watchFieldsRef,\n      getIsDirty = _ref7.getIsDirty,\n      watchSubjectRef = _ref7.watchSubjectRef,\n      fieldArraySubjectRef = _ref7.fieldArraySubjectRef,\n      fieldArrayNamesRef = _ref7.fieldArrayNamesRef,\n      fieldsRef = _ref7.fieldsRef,\n      defaultValuesRef = _ref7.defaultValuesRef,\n      formStateRef = _ref7.formStateRef,\n      formStateSubjectRef = _ref7.formStateSubjectRef,\n      readFormStateRef = _ref7.readFormStateRef,\n      validFieldsRef = _ref7.validFieldsRef,\n      fieldsWithValidationRef = _ref7.fieldsWithValidationRef,\n      fieldArrayDefaultValuesRef = _ref7.fieldArrayDefaultValuesRef,\n      unregister = _ref7.unregister,\n      shouldUnmountUnregister = _ref7.shouldUnmountUnregister;\n\n  var _React$useState5 = React.useState(mapIds(_get(fieldsRef.current, name) ? _get(getFieldsValues(fieldsRef), name) : _get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? _get(fieldArrayDefaultValuesRef.current, name, []) : _get(defaultValuesRef.current, name, []), keyName)),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      fields = _React$useState6[0],\n      setFields = _React$useState6[1];\n\n  set(fieldArrayDefaultValuesRef.current, name, _toConsumableArray(fields));\n  fieldArrayNamesRef.current.add(name);\n\n  var omitKey = function omitKey(fields) {\n    return fields.map(function (field) {\n      return omit(field || {}, keyName);\n    });\n  };\n\n  var getCurrentFieldsValues = function getCurrentFieldsValues() {\n    var values = _get(getFieldsValues(fieldsRef, defaultValuesRef.current), name, []);\n\n    return mapIds(_get(fieldArrayDefaultValuesRef.current, name, []).map(function (item, index) {\n      return Object.assign(Object.assign({}, item), values[index]);\n    }), keyName);\n  };\n\n  var getFocusDetail = function getFocusDetail(index, options) {\n    return options ? !isUndefined(options.focusIndex) ? \"\".concat(name, \".\").concat(options.focusIndex) : options.focusName ? options.focusName : !options.shouldFocus ? '' : \"\".concat(name, \".\").concat(index) : \"\".concat(name, \".\").concat(index);\n  };\n\n  var resetFields = function resetFields(index) {\n    return convertToArrayPayload(index).forEach(function (currentIndex) {\n      return set(fieldsRef.current, \"\".concat(name).concat(isUndefined(currentIndex) ? '' : \".\".concat(currentIndex)), isUndefined(currentIndex) ? [] : undefined);\n    });\n  };\n\n  var setFieldsAndNotify = function setFieldsAndNotify() {\n    var fieldsValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return setFields(mapIds(fieldsValues, keyName));\n  };\n\n  var cleanup = function cleanup(ref) {\n    return !compact(_get(ref, name, [])).length && unset(ref, name);\n  };\n\n  var updateDirtyFieldsWithDefaultValues = function updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues) {\n    return updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), _get(defaultValuesRef.current, name, []), _get(formStateRef.current.dirtyFields, name, [])));\n  };\n\n  var batchStateUpdate = function batchStateUpdate(method, args) {\n    var updatedFieldArrayValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var shouldSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    if (_get(fieldsRef.current, name)) {\n      var output = method(_get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(_get(formStateRef.current.errors, name))) {\n      var _output = method(_get(formStateRef.current.errors, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.errors, name, _output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touchedFields && _get(formStateRef.current.touchedFields, name)) {\n      var _output2 = method(_get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.touchedFields, name, _output2);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), _get(defaultValuesRef.current, name, []), _get(formStateRef.current.dirtyFields, name, [])));\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(validFieldsRef.current, name, method(_get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(_get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n\n  var registerFieldArray = function registerFieldArray(values) {\n    var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var parentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return values.forEach(function (appendValueItem, valueIndex) {\n      return !isPrimitive(appendValueItem) && Object.entries(appendValueItem).forEach(function (_ref8) {\n        var _ref9 = _slicedToArray(_ref8, 2),\n            key = _ref9[0],\n            value = _ref9[1];\n\n        var inputName = \"\".concat(parentName || name, \".\").concat(parentName ? valueIndex : index + valueIndex, \".\").concat(key);\n        Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : set(fieldsRef.current, inputName, {\n          _f: {\n            ref: {\n              name: inputName\n            },\n            name: inputName,\n            value: value\n          }\n        });\n      });\n    });\n  };\n\n  var append$1 = function append$1(value, options) {\n    var appendValue = convertToArrayPayload(value);\n    var updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    var currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  var prepend$1 = function prepend$1(value, options) {\n    var prependValue = convertToArrayPayload(value);\n    var updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  var remove = function remove(index) {\n    var updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n\n  var insert$1 = function insert$1(index, value, options) {\n    var insertValue = convertToArrayPayload(value);\n    var updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  var swap = function swap(indexA, indexB) {\n    var fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n\n  var move = function move(from, to) {\n    var fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n\n  React.useEffect(function () {\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      var _iterator3 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var watchField = _step3.value;\n\n          if (name.startsWith(watchField)) {\n            formStateSubjectRef.current.next({});\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name: name,\n      value: _get(getFieldsValues(fieldsRef, defaultValuesRef.current), name, [])\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, function (key) {\n      return key.startsWith(focusNameRef.current);\n    });\n    focusNameRef.current = '';\n    fieldArraySubjectRef.current.next({\n      name: name,\n      fields: omitKey(_toConsumableArray(fields))\n    });\n  }, [fields, name]);\n  React.useEffect(function () {\n    var fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next: function next(_ref10) {\n        var inputFieldArrayName = _ref10.name,\n            fields = _ref10.fields,\n            isReset = _ref10.isReset;\n\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, fields) : fieldArrayDefaultValuesRef.current = fields;\n          setFieldsAndNotify(_get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n    });\n    !_get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    return function () {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmountUnregister || shouldUnregister) && unregister(name);\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nfunction getFields(fieldsNames, fieldsRefs) {\n  var currentFields = {};\n\n  var _iterator4 = _createForOfIteratorHelper(fieldsNames),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var name = _step4.value;\n\n      var field = _get(fieldsRefs, name);\n\n      if (field) {\n        !isKey(name) ? set(currentFields, name, field._f) : currentFields[name] = field._f;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  return currentFields;\n}\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"\".concat(SELECT, \"-multiple\");\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.checked && !option.disabled;\n      }).map(function (option) {\n        return option.value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    return options[0].checked && !options[0].disabled ? // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nvar getFieldValueAs = function getFieldValueAs(value, _ref11) {\n  var valueAsNumber = _ref11.valueAsNumber,\n      valueAsDate = _ref11.valueAsDate,\n      setValueAs = _ref11.setValueAs;\n  return valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref12) {\n    var selected = _ref12.selected;\n    return selected;\n  }).map(function (_ref13) {\n    var value = _ref13.value;\n    return value;\n  });\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: null\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.checked && !option.disabled ? {\n      isValid: true,\n      value: option.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    var ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\n\nvar hasValidation = function hasValidation(options) {\n  return options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\n};\n\nvar skipValidation = function skipValidation(_ref14) {\n  var isOnBlur = _ref14.isOnBlur,\n      isOnChange = _ref14.isOnChange,\n      isOnTouch = _ref14.isOnTouch,\n      isTouched = _ref14.isTouched,\n      isReValidateOnBlur = _ref14.isReValidateOnBlur,\n      isReValidateOnChange = _ref14.isReValidateOnChange,\n      isBlurEvent = _ref14.isBlurEvent,\n      isSubmitted = _ref14.isSubmitted,\n      isOnAll = _ref14.isOnAll;\n\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || React.isValidElement(value);\n};\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref15, validateAllFieldCriteria) {\n    var _ref15$_f, ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, inputValue, valueAsNumber, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref17, value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, validateRef, result, validateError, validationResult, _i2, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _ref15$_f = _ref15._f, ref = _ref15$_f.ref, refs = _ref15$_f.refs, required = _ref15$_f.required, maxLength = _ref15$_f.maxLength, minLength = _ref15$_f.minLength, min = _ref15$_f.min, max = _ref15$_f.max, pattern = _ref15$_f.pattern, validate = _ref15$_f.validate, name = _ref15$_f.name, inputValue = _ref15$_f.value, valueAsNumber = _ref15$_f.valueAsNumber;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid))) {\n              _context.next = 14;\n              break;\n            }\n\n            _ref17 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), value = _ref17.value, message = _ref17.message;\n\n            if (!value) {\n              _context.next = 14;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 14:\n            if (!((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && inputValue !== '')) {\n              _context.next = 22;\n              break;\n            }\n\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n\n            if (!isNaN(inputValue)) {\n              valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(inputValue);\n\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 22;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 22;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 22:\n            if (!(isString(inputValue) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 31;\n              break;\n            }\n\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 31;\n              break;\n            }\n\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 31;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 31:\n            if (!(isString(inputValue) && pattern && !isEmpty)) {\n              _context.next = 37;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n\n            if (!(isRegex(patternValue) && !inputValue.match(patternValue))) {\n              _context.next = 37;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 37;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 37:\n            if (!validate) {\n              _context.next = 69;\n              break;\n            }\n\n            validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 42;\n            return validate(inputValue);\n\n          case 42:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 48;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 48;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 48:\n            _context.next = 69;\n            break;\n\n          case 50:\n            if (!isObject(validate)) {\n              _context.next = 69;\n              break;\n            }\n\n            validationResult = {};\n            _i2 = 0, _Object$entries = Object.entries(validate);\n\n          case 53:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 65;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 57;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 65);\n\n          case 57:\n            _context.next = 59;\n            return validateFunction(inputValue);\n\n          case 59:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 62:\n            _i2++;\n            _context.next = 53;\n            break;\n\n          case 65:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 69;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 69;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 69:\n            return _context.abrupt(\"return\", error);\n\n          case 70:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2) {\n    return _ref16.apply(this, arguments);\n  };\n}();\n\nvar getValidationModes = function getValidationModes(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription() {\n    _classCallCheck(this, Subscription);\n\n    this.tearDowns = [];\n  }\n\n  _createClass(Subscription, [{\n    key: \"add\",\n    value: function add(tearDown) {\n      this.tearDowns.push(tearDown);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _iterator5 = _createForOfIteratorHelper(this.tearDowns),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var teardown = _step5.value;\n          teardown();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      this.tearDowns = [];\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar Subscriber = /*#__PURE__*/function () {\n  function Subscriber(observer, subscription) {\n    var _this = this;\n\n    _classCallCheck(this, Subscriber);\n\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(function () {\n      return _this.closed = true;\n    });\n  }\n\n  _createClass(Subscriber, [{\n    key: \"next\",\n    value: function next(value) {\n      if (!this.closed) {\n        this.observer.next(value);\n      }\n    }\n  }]);\n\n  return Subscriber;\n}();\n\nvar Subject = /*#__PURE__*/function () {\n  function Subject() {\n    _classCallCheck(this, Subject);\n\n    this.observers = [];\n  }\n\n  _createClass(Subject, [{\n    key: \"next\",\n    value: function next(value) {\n      var _iterator6 = _createForOfIteratorHelper(this.observers),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var observer = _step6.value;\n          observer.next(value);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(observer) {\n      var subscription = new Subscription();\n      var subscriber = new Subscriber(observer, subscription);\n      this.observers.push(subscriber);\n      return subscription;\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      this.observers = [];\n    }\n  }]);\n\n  return Subject;\n}();\n\nvar isWindowUndefined = typeof window === UNDEFINED;\n\nfunction useForm() {\n  var _ref18 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref18$mode = _ref18.mode,\n      mode = _ref18$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref18$mode,\n      _ref18$reValidateMode = _ref18.reValidateMode,\n      reValidateMode = _ref18$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref18$reValidateMode,\n      resolver = _ref18.resolver,\n      context = _ref18.context,\n      _ref18$defaultValues = _ref18.defaultValues,\n      defaultValues = _ref18$defaultValues === void 0 ? {} : _ref18$defaultValues,\n      _ref18$shouldFocusErr = _ref18.shouldFocusError,\n      shouldFocusError = _ref18$shouldFocusErr === void 0 ? true : _ref18$shouldFocusErr,\n      shouldUnregister = _ref18.shouldUnregister,\n      criteriaMode = _ref18.criteriaMode;\n\n  var fieldsRef = React.useRef({});\n  var fieldsNamesRef = React.useRef(new Set());\n  var formStateSubjectRef = React.useRef(new Subject());\n  var unregisterFieldsNamesRef = React.useRef(new Set());\n  var watchSubjectRef = React.useRef(new Subject());\n  var controllerSubjectRef = React.useRef(new Subject());\n  var fieldArraySubjectRef = React.useRef(new Subject());\n  var fieldArrayDefaultValuesRef = React.useRef({});\n  var watchFieldsRef = React.useRef(new Set());\n  var isMountedRef = React.useRef(false);\n  var fieldsWithValidationRef = React.useRef({});\n  var validFieldsRef = React.useRef({});\n  var defaultValuesRef = React.useRef(defaultValues);\n  var isWatchAllRef = React.useRef(false);\n  var contextRef = React.useRef(context);\n  var resolverRef = React.useRef(resolver);\n  var fieldArrayNamesRef = React.useRef(new Set());\n  var validationMode = getValidationModes(mode);\n  var isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n\n  var _React$useState7 = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {}\n  }),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      formState = _React$useState8[0],\n      updateFormState = _React$useState8[1];\n\n  var readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  var formStateRef = React.useRef(formState);\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  var getIsValid = function getIsValid() {\n    return formStateRef.current.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  };\n\n  var shouldRenderBaseOnError = React.useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var isValid = arguments.length > 4 ? arguments[4] : undefined;\n    var isWatched = arguments.length > 5 ? arguments[5] : undefined;\n\n    var previousError = _get(formStateRef.current.errors, name);\n\n    var shouldReRender = shouldRender || !deepEqual(previousError, error, true) || readFormStateRef.current.isValid && isUndefined(error) && _get(fieldsWithValidationRef.current, name) && !_get(validFieldsRef.current, name);\n\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (_get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n\n      unset(formStateRef.current.errors, name);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state) || isWatched) {\n      var updatedFormState = Object.assign(Object.assign({}, state), {\n        isValid: resolverRef.current ? !!isValid : getIsValid(),\n        errors: formStateRef.current.errors\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      formStateSubjectRef.current.next(isWatched ? {\n        name: name\n      } : updatedFormState);\n    }\n\n    formStateSubjectRef.current.next({\n      isValidating: false\n    });\n  }, []);\n  var setFieldValue = React.useCallback(function (name, rawValue) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    var shouldRegister = arguments.length > 4 ? arguments[4] : undefined;\n    shouldRegister && register(name);\n\n    var _f = _get(fieldsRef.current, name, {})._f;\n\n    if (_f) {\n      var value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n      _f.value = getFieldValueAs(rawValue, _f);\n\n      if (isRadioInput(_f.ref)) {\n        (_f.refs || []).forEach(function (radioRef) {\n          return radioRef.checked = radioRef.value === value;\n        });\n      } else if (isFileInput(_f.ref) && !isString(value)) {\n        _f.ref.files = value;\n      } else if (isMultipleSelect(_f.ref)) {\n        _toConsumableArray(_f.ref.options).forEach(function (selectRef) {\n          return selectRef.selected = value.includes(selectRef.value);\n        });\n      } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n        _f.refs.length > 1 ? _f.refs.forEach(function (checkboxRef) {\n          return checkboxRef.checked = Array.isArray(value) ? !!value.find(function (data) {\n            return data === checkboxRef.value;\n          }) : value === checkboxRef.value;\n        }) : _f.refs[0].checked = !!value;\n      } else {\n        _f.ref.value = value;\n      }\n\n      if (shouldRender) {\n        var values = getFieldsValues(fieldsRef);\n        set(values, name, rawValue);\n        controllerSubjectRef.current.next({\n          values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n          name: name\n        });\n      }\n\n      options.shouldDirty && updateAndGetDirtyState(name, value);\n      options.shouldValidate && trigger(name);\n    }\n  }, []);\n  var getIsDirty = React.useCallback(function (name, data) {\n    var formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  var updateAndGetDirtyState = React.useCallback(function (name, inputValue) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      var isFieldDirty = !deepEqual(_get(defaultValuesRef.current, name), inputValue);\n\n      var isDirtyFieldExist = _get(formStateRef.current.dirtyFields, name);\n\n      var previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      formStateRef.current.isDirty = getIsDirty();\n      var state = {\n        isDirty: formStateRef.current.isDirty,\n        dirtyFields: formStateRef.current.dirtyFields,\n        name: name\n      };\n\n      var isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== _get(formStateRef.current.dirtyFields, name);\n\n      isChanged && shouldRender && formStateSubjectRef.current.next(state);\n      return isChanged ? state : {};\n    }\n\n    return {};\n  }, []);\n  var executeValidation = React.useCallback( /*#__PURE__*/function () {\n    var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return validateField(_get(fieldsRef.current, name), isValidateAllFieldCriteria);\n\n            case 2:\n              _context2.t0 = name;\n              error = _context2.sent[_context2.t0];\n              shouldRenderBaseOnError(name, error, skipReRender);\n              return _context2.abrupt(\"return\", isUndefined(error));\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x3, _x4) {\n      return _ref19.apply(this, arguments);\n    };\n  }(), [isValidateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = React.useCallback( /*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(names) {\n      var currentNames,\n          _yield$resolverRef$cu,\n          errors,\n          _iterator7,\n          _step7,\n          _name,\n          _error,\n          _args3 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              currentNames = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : [];\n              _context3.next = 3;\n              return resolverRef.current(getFieldsValues(fieldsRef, shouldUnregister ? {} : defaultValuesRef.current), contextRef.current, {\n                criteriaMode: criteriaMode,\n                names: currentNames,\n                fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n              });\n\n            case 3:\n              _yield$resolverRef$cu = _context3.sent;\n              errors = _yield$resolverRef$cu.errors;\n              _iterator7 = _createForOfIteratorHelper(names);\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  _name = _step7.value;\n                  _error = _get(errors, _name);\n                  _error ? set(formStateRef.current.errors, _name, _error) : unset(formStateRef.current.errors, _name);\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n\n              return _context3.abrupt(\"return\", errors);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x5) {\n      return _ref20.apply(this, arguments);\n    };\n  }(), [criteriaMode]);\n\n  var validateForm = /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fieldsRef) {\n      var isValid, _name2, field, _f, current, fieldError;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              isValid = true;\n              _context4.t0 = _regeneratorRuntime.keys(fieldsRef);\n\n            case 2:\n              if ((_context4.t1 = _context4.t0()).done) {\n                _context4.next = 19;\n                break;\n              }\n\n              _name2 = _context4.t1.value;\n              field = fieldsRef[_name2];\n\n              if (!field) {\n                _context4.next = 17;\n                break;\n              }\n\n              _f = field._f;\n              current = omit(field, '_f');\n\n              if (!_f) {\n                _context4.next = 13;\n                break;\n              }\n\n              _context4.next = 11;\n              return validateField(field, isValidateAllFieldCriteria);\n\n            case 11:\n              fieldError = _context4.sent;\n\n              if (fieldError[_f.name]) {\n                isValid = false;\n                set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n                unset(validFieldsRef.current, _f.name);\n              } else if (_get(fieldsWithValidationRef.current, _f.name)) {\n                set(validFieldsRef.current, _f.name, true);\n                unset(formStateRef.current.errors, _f.name);\n              }\n\n            case 13:\n              _context4.t2 = current;\n\n              if (!_context4.t2) {\n                _context4.next = 17;\n                break;\n              }\n\n              _context4.next = 17;\n              return validateForm(current);\n\n            case 17:\n              _context4.next = 2;\n              break;\n\n            case 19:\n              return _context4.abrupt(\"return\", isValid);\n\n            case 20:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function validateForm(_x6) {\n      return _ref21.apply(this, arguments);\n    };\n  }();\n\n  var trigger = React.useCallback( /*#__PURE__*/function () {\n    var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name) {\n      var fields, isValid;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              fields = isUndefined(name) ? Object.keys(fieldsRef.current) : convertToArrayPayload(name);\n              formStateSubjectRef.current.next({\n                isValidating: true\n              });\n\n              if (!resolverRef.current) {\n                _context6.next = 10;\n                break;\n              }\n\n              _context6.t0 = isEmptyObject;\n              _context6.next = 6;\n              return executeSchemaOrResolverValidation(fields, isUndefined(name) ? undefined : fields);\n\n            case 6:\n              _context6.t1 = _context6.sent;\n              isValid = (0, _context6.t0)(_context6.t1);\n              _context6.next = 20;\n              break;\n\n            case 10:\n              if (!isUndefined(name)) {\n                _context6.next = 16;\n                break;\n              }\n\n              _context6.next = 13;\n              return validateForm(fieldsRef.current);\n\n            case 13:\n              _context6.t2 = _context6.sent;\n              _context6.next = 19;\n              break;\n\n            case 16:\n              _context6.next = 18;\n              return Promise.all(fields.filter(function (fieldName) {\n                return _get(fieldsRef.current, fieldName);\n              }).map( /*#__PURE__*/function () {\n                var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(fieldName) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          _context5.next = 2;\n                          return executeValidation(fieldName, null);\n\n                        case 2:\n                          return _context5.abrupt(\"return\", _context5.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                return function (_x8) {\n                  return _ref23.apply(this, arguments);\n                };\n              }()));\n\n            case 18:\n              _context6.t2 = _context6.sent.every(Boolean);\n\n            case 19:\n              isValid = !!_context6.t2;\n\n            case 20:\n              formStateSubjectRef.current.next(Object.assign(Object.assign({}, isString(name) ? {\n                name: name\n              } : {}), {\n                errors: formStateRef.current.errors,\n                isValidating: false,\n                isValid: resolverRef.current ? isValid : getIsValid()\n              }));\n              return _context6.abrupt(\"return\", isValid);\n\n            case 22:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x7) {\n      return _ref22.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation]);\n  var setInternalValues = React.useCallback(function (name, value, options) {\n    return Object.entries(value).forEach(function (_ref24) {\n      var _ref25 = _slicedToArray(_ref24, 2),\n          inputKey = _ref25[0],\n          inputValue = _ref25[1];\n\n      var fieldName = \"\".concat(name, \".\").concat(inputKey);\n\n      var field = _get(fieldsRef.current, fieldName);\n\n      field && !field._f ? setInternalValues(fieldName, inputValue, options) : setFieldValue(fieldName, inputValue, options, true, !field);\n    });\n  }, [trigger]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  var updateValidAndValue = function updateValidAndValue(name, options, ref, isWithinRefCallback) {\n    var field = _get(fieldsRef.current, name);\n\n    var defaultValue = isUndefined(field._f.value) ? _get(defaultValuesRef.current, name) : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && ref.defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if ((!isUndefined(defaultValue) || isWithinRefCallback) && hasValidation(options) && !validationMode.isOnSubmit && field && readFormStateRef.current.isValid) {\n      validateField(field, isValidateAllFieldCriteria).then(function (error) {\n        isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n        formStateRef.current.isValid !== getIsValid() && updateFormState(Object.assign(Object.assign({}, formStateRef.current), {\n          isValid: getIsValid()\n        }));\n      });\n    }\n\n    return defaultValue;\n  };\n\n  var setValue = function setValue(name, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var field = _get(fieldsRef.current, name);\n\n    var isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name: name,\n        isReset: true\n      });\n\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, _get(defaultValuesRef.current, name, []), _get(formStateRef.current.dirtyFields, name, [])));\n        formStateSubjectRef.current.next({\n          name: name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    field && !field._f || isFieldArray ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({\n      name: name,\n      value: value\n    });\n  };\n\n  var handleChange = React.useCallback( /*#__PURE__*/function () {\n    var _ref27 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref26) {\n      var type, target, _ref26$target, value, inputType, name, error, isValid, field, inputValue, isBlurEvent, _getValidationModes, isReValidateOnBlur, isReValidateOnChange, shouldSkipValidation, isWatched, state, shouldRender, _yield$resolverRef$cu2, errors, previousFormIsValid, parentNodeName, currentError;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              type = _ref26.type, target = _ref26.target, _ref26$target = _ref26.target, value = _ref26$target.value, inputType = _ref26$target.type;\n              name = target.name;\n              field = _get(fieldsRef.current, name);\n\n              if (!field) {\n                _context7.next = 36;\n                break;\n              }\n\n              inputValue = inputType ? getFieldValue(field) : undefined;\n              inputValue = isUndefined(inputValue) ? value : inputValue;\n              isBlurEvent = type === EVENTS.BLUR;\n              _getValidationModes = getValidationModes(reValidateMode), isReValidateOnBlur = _getValidationModes.isOnBlur, isReValidateOnChange = _getValidationModes.isOnChange;\n              shouldSkipValidation = !hasValidation(field._f) && !resolverRef.current && !_get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n                isBlurEvent: isBlurEvent,\n                isTouched: !!_get(formStateRef.current.touchedFields, name),\n                isSubmitted: formStateRef.current.isSubmitted,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isReValidateOnChange: isReValidateOnChange\n              }, validationMode));\n              isWatched = !isBlurEvent && isFieldWatched(name);\n\n              if (!isUndefined(inputValue)) {\n                field._f.value = inputValue;\n              }\n\n              state = updateAndGetDirtyState(name, field._f.value, false);\n\n              if (isBlurEvent && !_get(formStateRef.current.touchedFields, name)) {\n                set(formStateRef.current.touchedFields, name, true);\n                readFormStateRef.current.touchedFields && (state.touchedFields = formStateRef.current.touchedFields);\n              }\n\n              shouldRender = !isEmptyObject(state) || isWatched;\n\n              if (!shouldSkipValidation) {\n                _context7.next = 17;\n                break;\n              }\n\n              !isBlurEvent && watchSubjectRef.current.next({\n                name: name,\n                type: type,\n                value: inputValue\n              });\n              return _context7.abrupt(\"return\", shouldRender && formStateSubjectRef.current.next(isWatched ? {\n                name: name\n              } : Object.assign(Object.assign({}, state), {\n                name: name\n              })));\n\n            case 17:\n              formStateSubjectRef.current.next({\n                isValidating: true\n              });\n\n              if (!resolverRef.current) {\n                _context7.next = 30;\n                break;\n              }\n\n              _context7.next = 21;\n              return resolverRef.current(getFieldsValues(fieldsRef, shouldUnregister ? {} : defaultValuesRef.current), contextRef.current, {\n                criteriaMode: criteriaMode,\n                fields: getFields([name], fieldsRef.current),\n                names: [name]\n              });\n\n            case 21:\n              _yield$resolverRef$cu2 = _context7.sent;\n              errors = _yield$resolverRef$cu2.errors;\n              previousFormIsValid = formStateRef.current.isValid;\n              error = _get(errors, name);\n\n              if (isCheckBoxInput(target) && !error) {\n                parentNodeName = getNodeParentName(name);\n                currentError = _get(errors, parentNodeName, {});\n                currentError.type && currentError.message && (error = currentError);\n\n                if (currentError || _get(formStateRef.current.errors, parentNodeName)) {\n                  name = parentNodeName;\n                }\n              }\n\n              isValid = isEmptyObject(errors);\n              previousFormIsValid !== isValid && (shouldRender = true);\n              _context7.next = 34;\n              break;\n\n            case 30:\n              _context7.next = 32;\n              return validateField(field, isValidateAllFieldCriteria);\n\n            case 32:\n              _context7.t0 = name;\n              error = _context7.sent[_context7.t0];\n\n            case 34:\n              !isBlurEvent && watchSubjectRef.current.next({\n                name: name,\n                type: type,\n                value: inputValue\n              });\n              shouldRenderBaseOnError(name, error, shouldRender, state, isValid, isWatched);\n\n            case 36:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n\n    return function (_x9) {\n      return _ref27.apply(this, arguments);\n    };\n  }(), []);\n\n  var getValues = function getValues(fieldNames) {\n    var values = isMountedRef.current ? getFieldsValues(fieldsRef, shouldUnregister ? {} : defaultValuesRef.current) : defaultValuesRef.current;\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? _get(values, fieldNames) : fieldNames.map(function (name) {\n      return _get(values, name);\n    });\n  };\n\n  var updateIsValid = React.useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    var values,\n        previousIsValid,\n        _yield$resolverRef$cu3,\n        errors,\n        _args8 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            values = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n            previousIsValid = formStateRef.current.isValid;\n\n            if (!resolver) {\n              _context8.next = 10;\n              break;\n            }\n\n            _context8.next = 5;\n            return resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef, shouldUnregister ? {} : defaultValuesRef.current)), values), contextRef.current, {\n              criteriaMode: criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n            });\n\n          case 5:\n            _yield$resolverRef$cu3 = _context8.sent;\n            errors = _yield$resolverRef$cu3.errors;\n            formStateRef.current.isValid = isEmptyObject(errors);\n            _context8.next = 11;\n            break;\n\n          case 10:\n            getIsValid();\n\n          case 11:\n            previousIsValid !== formStateRef.current.isValid && formStateSubjectRef.current.next({\n              isValid: formStateRef.current.isValid\n            });\n\n          case 12:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  })), [criteriaMode]);\n\n  var clearErrors = function clearErrors(name) {\n    name && convertToArrayPayload(name).forEach(function (inputName) {\n      return unset(formStateRef.current.errors, inputName);\n    });\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  };\n\n  var setError = function setError(name, error, options) {\n    var ref = ((_get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n    formStateSubjectRef.current.next({\n      name: name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  var watchInternal = React.useCallback(function (fieldNames, defaultValue, isGlobal) {\n    var isArrayNames = Array.isArray(fieldNames);\n    var fieldValues = isMountedRef.current ? getFieldsValues(fieldsRef, defaultValuesRef.current) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue || {} : _defineProperty({}, fieldNames, defaultValue);\n\n    if (isUndefined(fieldNames)) {\n      isGlobal && (isWatchAllRef.current = true);\n      return fieldValues;\n    }\n\n    var result = [];\n\n    var _iterator8 = _createForOfIteratorHelper(isArrayNames ? fieldNames : [fieldNames]),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var fieldName = _step8.value;\n        isGlobal && watchFieldsRef.current.add(fieldName);\n        result.push(_get(fieldValues, fieldName));\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    return isArrayNames ? result : result[0];\n  }, []);\n\n  var watch = function watch(fieldName, defaultValue) {\n    return isFunction(fieldName) ? watchSubjectRef.current.subscribe({\n      next: function next(info) {\n        return fieldName(watchInternal(undefined, defaultValue), info);\n      }\n    }) : watchInternal(fieldName, defaultValue, true);\n  };\n\n  var unregister = function unregister(name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _iterator9 = _createForOfIteratorHelper(name ? convertToArrayPayload(name) : Object.keys(fieldsNamesRef.current)),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var inputName = _step9.value;\n        fieldsNamesRef.current.delete(inputName);\n        fieldArrayNamesRef.current.delete(inputName);\n\n        if (_get(fieldsRef.current, inputName)) {\n          if (!options.keepIsValid) {\n            unset(fieldsWithValidationRef.current, inputName);\n            unset(validFieldsRef.current, inputName);\n          }\n\n          !options.keepError && unset(formStateRef.current.errors, inputName);\n          !options.keepValue && unset(fieldsRef.current, inputName);\n          !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n          !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n          !shouldUnregister && !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n          watchSubjectRef.current.next({\n            name: inputName\n          });\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    formStateSubjectRef.current.next(Object.assign(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }), resolverRef.current ? {} : {\n      isValid: getIsValid()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n\n  var registerFieldRef = function registerFieldRef(name, ref, options) {\n    register(name, options);\n\n    var field = _get(fieldsRef.current, name);\n\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (ref === field._f.ref || isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref) || isRadioOrCheckbox && Array.isArray(field._f.refs) && compact(field._f.refs).find(function (option) {\n      return option === ref;\n    })) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [].concat(_toConsumableArray(compact(field._f.refs || []).filter(function (ref) {\n          return isHTMLElement(ref) && document.contains(ref);\n        })), [ref]),\n        ref: {\n          type: ref.type,\n          name: name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref: ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    var defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (isRadioOrCheckbox && Array.isArray(defaultValue) ? !deepEqual(_get(fieldsRef.current, name)._f.value, defaultValue) : isUndefined(_get(fieldsRef.current, name)._f.value)) {\n      _get(fieldsRef.current, name)._f.value = getFieldValue(_get(fieldsRef.current, name));\n    }\n  };\n\n  var register = React.useCallback(function (name, options) {\n    var isInitialRegister = !_get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, isInitialRegister ? {\n        ref: {\n          name: name\n        }\n      } : Object.assign({\n        ref: (_get(fieldsRef.current, name)._f || {}).ref\n      }, _get(fieldsRef.current, name)._f)), {\n        name: name\n      }), options)\n    });\n    hasValidation(options) && set(fieldsWithValidationRef.current, name, true);\n    fieldsNamesRef.current.add(name);\n    isInitialRegister && updateValidAndValue(name, options);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name: name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: function (_ref30) {\n        function ref(_x10) {\n          return _ref30.apply(this, arguments);\n        }\n\n        ref.toString = function () {\n          return _ref30.toString();\n        };\n\n        return ref;\n      }(function (ref) {\n        ref ? registerFieldRef(name, ref, options) : (shouldUnregister || options && options.shouldUnregister) && isWeb && unregisterFieldsNamesRef.current.add(name);\n      })\n    };\n  }, [defaultValuesRef.current]);\n  var handleSubmit = React.useCallback(function (onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref31 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(e) {\n        var fieldValues, _yield$resolverRef$cu4, errors, values;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (e) {\n                  e.preventDefault && e.preventDefault();\n                  e.persist && e.persist();\n                }\n\n                fieldValues = Object.assign(Object.assign({}, shouldUnregister ? {} : defaultValuesRef.current), getFieldsValues(fieldsRef));\n                formStateSubjectRef.current.next({\n                  isSubmitting: true\n                });\n                _context9.prev = 3;\n\n                if (!resolverRef.current) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                _context9.next = 7;\n                return resolverRef.current(fieldValues, contextRef.current, {\n                  criteriaMode: criteriaMode,\n                  fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n                });\n\n              case 7:\n                _yield$resolverRef$cu4 = _context9.sent;\n                errors = _yield$resolverRef$cu4.errors;\n                values = _yield$resolverRef$cu4.values;\n                formStateRef.current.errors = errors;\n                fieldValues = values;\n                _context9.next = 16;\n                break;\n\n              case 14:\n                _context9.next = 16;\n                return validateForm(fieldsRef.current);\n\n              case 16:\n                if (!(isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(function (name) {\n                  return _get(fieldValues, name);\n                }))) {\n                  _context9.next = 22;\n                  break;\n                }\n\n                formStateSubjectRef.current.next({\n                  errors: {},\n                  isSubmitting: true\n                });\n                _context9.next = 20;\n                return onValid(fieldValues, e);\n\n              case 20:\n                _context9.next = 27;\n                break;\n\n              case 22:\n                _context9.t0 = onInvalid;\n\n                if (!_context9.t0) {\n                  _context9.next = 26;\n                  break;\n                }\n\n                _context9.next = 26;\n                return onInvalid(formStateRef.current.errors, e);\n\n              case 26:\n                shouldFocusError && focusFieldBy(fieldsRef.current, function (key) {\n                  return _get(formStateRef.current.errors, key);\n                }, fieldsNamesRef.current);\n\n              case 27:\n                _context9.prev = 27;\n                formStateRef.current.isSubmitted = true;\n                formStateSubjectRef.current.next({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n                  submitCount: formStateRef.current.submitCount + 1,\n                  errors: formStateRef.current.errors\n                });\n                return _context9.finish(27);\n\n              case 31:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[3,, 27, 31]]);\n      }));\n\n      return function (_x11) {\n        return _ref31.apply(this, arguments);\n      };\n    }();\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode]);\n  var resetFromState = React.useCallback(function (_ref32, values) {\n    var keepErrors = _ref32.keepErrors,\n        keepDirty = _ref32.keepDirty,\n        keepIsSubmitted = _ref32.keepIsSubmitted,\n        keepTouched = _ref32.keepTouched,\n        keepDefaultValues = _ref32.keepDefaultValues,\n        keepIsValid = _ref32.keepIsValid,\n        keepSubmitCount = _ref32.keepSubmitCount;\n\n    if (!keepIsValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    formStateSubjectRef.current.next({\n      submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepDirty ? formStateRef.current.isDirty : keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: keepIsValid ? formStateRef.current.isValid : !!updateIsValid(values),\n      dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  }, []);\n\n  var reset = function reset(values) {\n    var keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      var _iterator10 = _createForOfIteratorHelper(fieldsNamesRef.current),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _name3 = _step10.value;\n\n          var field = _get(fieldsRef.current, _name3);\n\n          if (field && field._f) {\n            var inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n\n            if (isHTMLElement(inputRef)) {\n              try {\n                inputRef.closest('form').reset();\n                break;\n              } catch (_a) {}\n            }\n          }\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      controllerSubjectRef.current.next({\n        values: Object.assign({}, updatedValues)\n      });\n      watchSubjectRef.current.next({\n        value: Object.assign({}, updatedValues)\n      });\n      fieldArraySubjectRef.current.next({\n        fields: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n\n    resetFromState(keepStateOptions, values);\n    isMountedRef.current = false;\n  };\n\n  var setFocus = function setFocus(name) {\n    return _get(fieldsRef.current, name)._f.ref.focus();\n  };\n\n  React.useEffect(function () {\n    var formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: function next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n    });\n    var useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next: function next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          var values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      }\n    });\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n    return function () {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(function () {\n    var isLiveInDom = function isLiveInDom(ref) {\n      return !isHTMLElement(ref) || !document.contains(ref);\n    };\n\n    isMountedRef.current = true;\n    unregisterFieldsNamesRef.current.forEach(function (name) {\n      var field = _get(fieldsRef.current, name);\n\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregister(name);\n    });\n    unregisterFieldsNamesRef.current = new Set();\n  });\n  return {\n    control: React.useMemo(function () {\n      return {\n        register: register,\n        isWatchAllRef: isWatchAllRef,\n        watchFieldsRef: watchFieldsRef,\n        getIsDirty: getIsDirty,\n        formStateSubjectRef: formStateSubjectRef,\n        fieldArraySubjectRef: fieldArraySubjectRef,\n        controllerSubjectRef: controllerSubjectRef,\n        watchSubjectRef: watchSubjectRef,\n        watchInternal: watchInternal,\n        fieldsRef: fieldsRef,\n        validFieldsRef: validFieldsRef,\n        fieldsWithValidationRef: fieldsWithValidationRef,\n        fieldArrayNamesRef: fieldArrayNamesRef,\n        readFormStateRef: readFormStateRef,\n        formStateRef: formStateRef,\n        defaultValuesRef: defaultValuesRef,\n        fieldArrayDefaultValuesRef: fieldArrayDefaultValuesRef,\n        unregister: unregister,\n        shouldUnmountUnregister: shouldUnregister\n      };\n    }, []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger: trigger,\n    register: register,\n    handleSubmit: handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\n\nfunction useWatch(props) {\n  var _ref33 = props || {},\n      control = _ref33.control,\n      name = _ref33.name,\n      defaultValue = _ref33.defaultValue;\n\n  var methods = useFormContext();\n  var nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  var _ref34 = control || methods.control,\n      watchInternal = _ref34.watchInternal,\n      watchSubjectRef = _ref34.watchSubjectRef;\n\n  var _React$useState9 = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      value = _React$useState10[0],\n      updateValue = _React$useState10[1];\n\n  React.useEffect(function () {\n    watchInternal(name);\n    var watchSubscription = watchSubjectRef.current.subscribe({\n      next: function next(_ref35) {\n        var inputName = _ref35.name,\n            value = _ref35.value;\n        return (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(function (fieldName) {\n          return inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName));\n        })) && updateValue(isString(inputName) && nameRef.current === inputName && !isUndefined(value) ? value : watchInternal(nameRef.current, defaultValue));\n      }\n    });\n    return function () {\n      return watchSubscription.unsubscribe();\n    };\n  }, []);\n  return value;\n}\n\nexport { Controller, FormProvider, appendErrors, _get as get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","import * as React from 'react'\n\nconst ShopCard = () => {\n    return (\n        \n        <div class=\"flex flex-wrap items-center justify-center\">\n            <div class=\"flex-shrink-0 mx-2 mb-6 relative overflow-hidden bg-yellow-500 rounded-lg max-w-xs shadow-lg \">\n                <svg class=\"absolute bottom-0 left-0 mb-8\" viewBox=\"0 0 375 283\" fill=\"none\">\n                    <rect x=\"159.52\" y=\"175\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 159.52 175)\" fill=\"#f3c06b\">\n                    </rect>\n                    <rect y=\"107.48\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 0 107.48)\" fill=\"#f3c06b\">\n                    </rect>\n                </svg>\n                <div class=\"relative pt-10 px-10 flex items-center justify-center\">\n                    <div class=\"block absolute w-48 h-48 bottom-0 left-0 -mb-24 ml-3\">\n                    </div>\n                    <picture>\n                            <source srcSet=\"https://picsum.photos/200/300\"/>\n                                <img class=\"relative w-40\" src=\"https://picsum.photos/200/300\" alt=\"shopping item\"/>\n                            </picture>\n                        </div>\n                        <div class=\"relative text-white px-6 pb-6 mt-6\">\n                            <span class=\"block opacity-75 -mb-1\">\n                                Indoor\n                            </span>\n                            <div class=\"flex justify-between\">\n                                <span class=\"block font-semibold text-xl\">\n                                    Peace Lily\n                                </span>\n                                <span class=\"bg-white rounded-full text-yellow-500 text-xs font-bold px-3 py-2 leading-none flex items-center\">\n                                    $36.00\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"flex-shrink-0 mx-2 mb-6 sm:mb-0 relative overflow-hidden bg-blue-500 rounded-lg max-w-xs shadow-lg\">\n                        <svg class=\"absolute bottom-0 left-0 mb-8\" viewBox=\"0 0 375 283\" fill=\"none\">\n                            <rect x=\"159.52\" y=\"175\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 159.52 175)\" fill=\"#6da3fb\">\n                            </rect>\n                            <rect y=\"107.48\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 0 107.48)\" fill=\"#6da3fb\">\n                            </rect>\n                        </svg>\n                        <div class=\"relative pt-10 px-10 flex items-center justify-center\">\n                            <div class=\"block absolute w-48 h-48 bottom-0 left-0 -mb-24 ml-3\">\n                            </div>\n                            <img class=\"relative w-40\" src=\"https://picsum.photos/200/300\" alt=\"shopping\"/>\n                        </div>\n                        <div class=\"relative text-white px-6 pb-6 mt-6\">\n                            <span class=\"block opacity-75 -mb-1\">\n                                Outdoor\n                            </span>\n                            <div class=\"flex justify-between\">\n                                <span class=\"block font-semibold text-xl\">\n                                    Monstera\n                                </span>\n                                <span class=\"bg-white rounded-full text-blue-500 text-xs font-bold px-3 py-2 leading-none flex items-center\">\n                                    $45.00\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"flex-shrink-0 mx-2 -mb-6 relative overflow-hidden bg-purple-500 rounded-lg max-w-xs shadow-lg\">\n                        <svg class=\"absolute bottom-0 left-0 mb-8\" viewBox=\"0 0 375 283\" fill=\"none\">\n                            <rect x=\"159.52\" y=\"175\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 159.52 175)\" fill=\"#a17cf3\">\n                            </rect>\n                            <rect y=\"107.48\" width=\"152\" height=\"152\" rx=\"8\" transform=\"rotate(-45 0 107.48)\" fill=\"#a17cf3\">\n                            </rect>\n                        </svg>\n                        <div class=\"relative pt-10 px-10 flex items-center justify-center\">\n                            <div class=\"block absolute w-48 h-48 bottom-0 left-0 -mb-24 ml-3\">\n                            </div>\n                            <img class=\"relative w-40\" src=\"https://picsum.photos/200/300\" alt=\"shopping\"/>\n                        </div>\n                        <div class=\"relative text-white px-6 pb-6 mt-6\">\n                            <span class=\"block opacity-75 -mb-1\">\n                                Outdoor\n                            </span>\n                            <div class=\"flex justify-between\">\n                                <span class=\"block font-semibold text-xl\">\n                                    Oak Tree\n                                </span>\n                                <span class=\"bg-white rounded-full text-purple-500 text-xs font-bold px-3 py-2 leading-none flex items-center\">\n                                    $68.50\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\n    export default ShopCard\n","import React from \"react\";\nfunction UikitCard() {\n    return (\n        <>\n            {/* Card is full width. Use in 12 col grid for best view. */}\n            {/* Card code block start */}\n            <div className=\"flex flex-col-reverse h-70% lg:flex-row w-full bg-white dark:bg-gray-800 rounded-lg shadow-2xl glass-effect\">\n                <div className=\"w-full lg:w-1/2\">\n                    <div className=\"pt-4 lg:pt-6 pb-4 lg:pb-6 pl-4 lg:pl-6 pr-4 lg:pr-6\">\n                        <div className=\"flex justify-between items-center lg:items-start flex-row-reverse lg:flex-col\">\n                            <h4 className=\"text-base text-indigo-700 dark:text-indigo-600 tracking-normal leading-4\">12:00pm</h4>\n                            <h4 className=\"lg:mt-3 text-gray-600 dark:text-gray-400 text-base font-normal\">23 December, Sunday</h4>\n                        </div>\n                        <h2 className=\"text-gray-800 dark:text-gray-100 mt-4 mb-2 tracking-normal text-xl lg:text-2xl font-bold\">CES - The Global Stage for Innovation</h2>\n                        <p className=\"mb-6 font-normal justify-center text-gray-600 dark:text-gray-400 text-sm tracking-normal w-11/12 lg:w-9/12\">The Consumer Technology Association’s CES 2020 will take place on 7-10 January at the Las Vegas Convention Center in Nevada. It will bring together over 150,000 delegates and 4,500 exhibitors to explore the business of consumer technologies.The Consumer Technology Association’s CES 2020 will take place on 7-10 January at the Las Vegas Convention Center in Nevada. It will bring together over 150,000 delegates and 4,500 exhibitors to explore the business of consumer technologies.The Consumer Technology Association’s CES 2020 will take place on 7-10 January at the Las Vegas Convention Center in Nevada. It will bring together over 150,000 delegates and 4,500 exhibitors to explore the business of consumer technologies.The Consumer Technology Association’s CES 2020 will take place on 7-10 January at the Las Vegas Convention Center in Nevada. It will bring together over 150,000 delegates and 4,500 exhibitors to explore the business of consumer technologies.The Consumer Technology Association’s CES 2020 will take place on 7-10 January at the Las Vegas Convention Center in Nevada. It will bring together over 150,000 delegates and 4,500 exhibitors to explore the business of consumer technologies.</p>\n                        <div className=\"flex lg:items-center items-start flex-col lg:flex-row\">\n                            {/* <div className=\"flex items-center\">\n                                <div className=\"border-2 border-white dark:border-gray-700 shadow rounded-full w-6 h-6\">\n                                    <img className=\"w-full h-full overflow-hidden object-cover rounded-full\" src=\"https://dh-ui.s3.amazonaws.com/assets/webapp/layout/grid_cards/grid_card8.jpg\" alt=\"avatar\" />\n                                </div>\n                                <div className=\"-ml-2 border-2 border-white dark:border-gray-700 shadow rounded-full w-6 h-6\">\n                                    <img className=\"w-full h-full overflow-hidden object-cover rounded-full\" src=\"https://dh-ui.s3.amazonaws.com/assets/webapp/layout/grid_cards/grid_card9.jpg\" alt=\"avatar\" />\n                                </div>\n                                <div className=\"-ml-2 border-2 border-white dark:border-gray-700 shadow rounded-full w-6 h-6\">\n                                    <img className=\"w-full h-full overflow-hidden object-cover rounded-full\" src=\"https://dh-ui.s3.amazonaws.com/assets/webapp/layout/grid_cards/grid_card10.jpg\" alt=\"avatar\" />\n                                </div>\n                                <div className=\"-ml-2 border-2 border-white dark:border-gray-700 shadow rounded-full w-6 h-6\">\n                                    <img className=\"w-full h-full overflow-hidden object-cover rounded-full\" src=\"https://dh-ui.s3.amazonaws.com/assets/webapp/layout/grid_cards/grid_card11.jpg\" alt=\"avatar\" />\n                                </div>\n                                <div className=\"-ml-2 border-2 border-white dark:border-gray-700 shadow rounded-full w-6 h-6\">\n                                    <img className=\"w-full h-full overflow-hidden object-cover rounded-full\" src=\"https://dh-ui.s3.amazonaws.com/assets/webapp/layout/grid_cards/grid_card12.jpg\" alt=\"avatar\" />\n                                </div>\n                                <p className=\"text-gray-600 dark:text-gray-400 text-xs font-normal ml-1\">+12 Attendees</p>\n                            </div> */}\n                            <div className=\"mt-4 lg:mt-0 ml-0 lg:ml-12 flex items-end\">\n                                <span className=\"mr-1 text-gray-600 dark:text-gray-400\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width={20} height={20} viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"currentColor\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                                        <circle cx={12} cy={11} r={3} />\n                                        <path d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 0 1 -2.827 0l-4.244-4.243a8 8 0 1 1 11.314 0z\" />\n                                    </svg>\n                                </span>\n                                <p className=\"text-gray-600 dark:text-gray-400 text-sm tracking-normal font-normal text-center\">Las Vegas, Nevada</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"px-5 lg:px-5 md:px-10 py-3 lg:py-4 flex flex-row items-center justify-between border-t border-gray-300\">\n                        <div className=\"flex items-center\">\n                            <div className=\"flex items-center\">\n                                <div className=\"bg-white rounded-full w-5 h-5 flex flex-shrink-0 justify-center items-center relative\">\n                                    <input defaultChecked type=\"radio\" name=\"radio\" className=\"checkbox appearance-none focus:outline-none border rounded-full border-gray-400 absolute cursor-pointer w-full h-full checked:border-none\" />\n                                    <div className=\"check-icon hidden border-4 border-black dark:border-gray-700 rounded-full w-full h-full z-1\" />\n                                </div>\n                                <p className=\"ml-3 text-base leading-4 font-normal text-gray-800 dark:text-gray-100\">Going</p>\n                            </div>\n                            <div className=\"flex items-center ml-6\">\n                                <div className=\"bg-white rounded-full w-5 h-5 flex flex-shrink-0 justify-center items-center relative\">\n                                    <input type=\"radio\" name=\"radio\" className=\"checkbox appearance-none focus:outline-none border rounded-full border-gray-400 absolute cursor-pointer w-full h-full checked:border-none\" />\n                                    <div className=\"check-icon hidden border-4 border-black dark:border-gray-700 rounded-full w-full h-full z-1\" />\n                                </div>\n                                <p className=\"ml-3 text-base leading-4 font-normal text-gray-800 dark:text-gray-100\">Not Going</p>\n                            </div>\n                        </div>\n                        <div className=\"flex items-center\">\n                            <div className=\"text-gray-600 dark:text-gray-400 hover:text-gray-700 cursor-pointer mr-4\">\n                                <svg className=\"feather feather-bookmark\" xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                    <path d=\"M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z\" />\n                                </svg>\n                            </div>\n                            <div className=\"text-indigo-700 dark:text-indigo-600 hover:text-indigo-600 cursor-pointer\">\n                                <svg className=\"feather feather-share-2\" xmlns=\"http://www.w3.org/2000/svg\" width={24} height={24} viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                                    <circle cx={18} cy={5} r={3} />\n                                    <circle cx={6} cy={12} r={3} />\n                                    <circle cx={18} cy={19} r={3} />\n                                    <line x1=\"8.59\" y1=\"13.51\" x2=\"15.42\" y2=\"17.49\" />\n                                    <line x1=\"15.41\" y1=\"6.51\" x2=\"8.59\" y2=\"10.49\" />\n                                </svg>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"relative w-full h-64 lg:h-auto lg:w-1/2 rounded-t lg:rounded-t-none lg:rounded-r inline-block\">\n                    <img className=\"w-full h-full absolute inset-0 object-cover rounded-t lg:rounded-r lg:rounded-t-none\" src=\"https://tuk-cdn.s3.amazonaws.com/assets/components/grid_cards/gc_27.png\" alt=\"banner\" />\n                </div>\n\n                <style>\n                    {` .checkbox:checked {\n                                    border: none;\n                                }\n                                .checkbox:checked + .check-icon {\n                                    display: flex;\n                                }`}\n                </style>\n            </div>\n            {/* Card code block end */}\n        </>\n    );\n}\nexport default UikitCard;\n","import * as React from \"react\"\nimport Cardgame, {event} from \"../components/events.component\"\nimport CardOne from \"../components/ex/c1\"\nimport Form1 from \"../components/forms/form1.component\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport ShopCard from \"../components/shoppingcard.component\"\nimport UikitCard from \"../components/uikit-card.component\"\n\nconst IndexPage = () => (\n  <Layout route=\"/link1\">\n    <Seo title=\"Link 1\" />\n\n    <div className=\"pt-10 pb-5 px-2 sm:px-10\">\n      <p className=\"py-72 bg-white rounded-lg shadow-2xl\">\n        Content\n        <span role=\"img\" aria-label=\"partying-face\">\n          🥳\n        </span>\n        <span role=\"img\" aria-label=\"partying-face\">\n          🥳\n        </span>\n        <span role=\"img\" aria-label=\"smiling-face-with-halo\">\n          😇\n        </span>\n      </p>\n    </div>\n\n    <div className=\"pt-5 pb-10 px-2 sm:px-10\">\n      <p className=\"py-72 bg-white rounded-lg shadow-2xl\">\n        Content\n        <span role=\"img\" aria-label=\"partying-face\">\n          🥳\n        </span>\n        <span role=\"img\" aria-label=\"partying-face\">\n          🥳\n        </span>\n        <span role=\"img\" aria-label=\"smiling-face-with-halo\">\n          😇\n        </span>\n      </p>\n    </div>\n\n    <div className=\"pt-10 pb-5 px-2 sm:px-10\">\n      <div className=\"rounded-lg shadow-2xl glass-effect \">\n      <div className='ml-4 place-self-center'>\n        <Cardgame/>\n      </div>\n      </div>\n    </div>\n\n\n        <div className=\"max-w-7xl justify-center\">\n          <UikitCard/>\n        </div>\n\n    <div className=\"object-center\"><UikitCard/></div>\n\n    <div className=\"pt-10 pb-5 px-2 sm:px-10 object-center\">\n      <div className=\"rounded-lg shadow-2xl \">\n      \n      <UikitCard/>\n      \n      </div>\n    </div>\n\n    <ShopCard/>\n    <UikitCard/>\n    <CardOne></CardOne>\n    <div>\n    <iframe id=\"typeform-full\" width=\"100%\" height=\"100%\" frameborder=\"0\" allow=\"camera; microphone; autoplay; encrypted-media;\" src=\"https://form.typeform.com/to/mYRWPPsq?typeform-medium=embed-snippet\"></iframe>\n    </div>\n\n  </Layout>\n  \n\n)\n\nexport default IndexPage\n"],"sourceRoot":""}